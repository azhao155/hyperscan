syntax = "proto3";

package wafservice;

service WafService {
  rpc EvalRequest (stream WafHttpRequest) returns (WafDecision) {}
  rpc PutConfig (WAFConfig) returns (PutConfigResponse) {}
  rpc PutGeoIPData (stream GeoIPData) returns (PutGeoIPDataResponse) {}
  rpc DisposeConfig (WAFConfigVersion) returns (DisposeConfigResponse) {}
  rpc PutIPReputationList (stream IpReputationList) returns (PutIPReputationListResponse) {}
}

message HeaderPair {
   string key = 1;
   string value = 2;
}

message WafHttpRequest {
    oneof content {
        HeadersAndFirstChunk headersAndFirstChunk = 1;
        NextBodyChunk nextBodyChunk = 2;
    }
}

message HeadersAndFirstChunk {
  string transactionID = 11;
  string remoteAddr = 9;
  string configID = 7;
  RequestLogMetaData metaData = 8;
  string method = 1;
  string uri = 2;
  string protocol = 10;
  repeated HeaderPair headers = 3;
  bytes firstBodyChunk = 4;
  bool moreBodyChunks = 5;
}

message RequestLogMetaData {
  string scope = 1;
  string scopeName = 2;
}

message NextBodyChunk {
  bytes bodyChunk = 1;
  bool moreBodyChunks = 2;
}


message WafDecision {
  bool allow = 1 [deprecated=true];

  enum Action {
    UNINITIALIZED = 0;
    PASS = 1;
    ALLOW = 2;
    BLOCK = 3;
  }
  Action action = 2;
}

message WAFConfig {
  int32 configVersion = 1;
  repeated PolicyConfig policyConfigs = 2;
  ConfigLogMetaData metaData = 3;
}

message ConfigLogMetaData {
  string resourceID = 1;
  string instanceID = 2;
}

message CustomRule {
  string name = 1;
  int32 priority = 2;
  string ruleType = 3;
  repeated MatchCondition matchConditions = 4;
  string action = 5;
}

message MatchCondition {
  repeated MatchVariable matchVariables = 1;
  string operator = 2;
  bool negateCondition = 3;
  repeated string matchValues = 4;
  repeated string transforms = 5;
}

message MatchVariable {
  string variableName = 1;
  string selector = 2;
}

message PolicyConfig {
  string configID = 1;
  bool isDetectionMode = 5;
  bool isShadowMode = 7;
  bool requestBodyCheck = 8;
  int32 requestBodySizeLimitInKb = 9;
  int32 fileUploadSizeLimitInMb = 10;

  SecRuleConfig secRuleConfig = 2;
  CustomRuleConfig customRuleConfig = 3;
  IPReputationConfig ipReputationConfig = 4;
}

message SecRuleConfig {
  bool enabled = 1;
  string ruleSetId = 2;
  repeated Exclusion exclusions = 3;
}

message GeoDBConfig {
  bool enabled = 1;
}

message GeoIPData {
  repeated GeoIPDataRecord geoIPDataRecords = 1;
}

message GeoIPDataRecord {
  uint32 startIP = 1;
  uint32 endIP = 2;
  string countryCode = 3;
}

message PutGeoIPDataResponse {
}

message CustomRuleConfig {
  repeated CustomRule customRules = 1;
}

message IPReputationConfig {
  bool enabled = 1;
}

message PutConfigResponse {
}

message WAFConfigVersion {
  int32 configVersion = 1;
}

message DisposeConfigResponse {
}

message IpReputationList {
  repeated string ip = 1;
}

message PutIPReputationListResponse {
}

message Exclusion {
  string matchVariable = 1;
  string selectorMatchOperator = 2;
  string selector = 3;
  repeated int32 rules = 4;
}
