package hyperscan

import (
	"fmt"
	"strings"
	"testing"
)

func TestRemovePcrePossessiveQuantifier(t *testing.T) {
	// Arrange
	type testcase struct {
		input    string
		expected string
	}
	tests := []testcase{
		{`a++`, `a+`},
		{`a\++`, `a\++`},
		{`\++`, `\++`},
		{`\\++`, `\\+`},
		{`\\\++`, `\\\++`},
		{`\\\\++`, `\\\\+`},
		{`\\\\\++`, `\\\\\++`},
		{`xa++a++x`, `xa+a+x`},
		{`xa\++a++x`, `xa\++a+x`},
		{`xa\++a\++x`, `xa\++a\++x`},
		{
			`(?i:([\s'"\(\)]*?)([\d\w]++)([\s'"\(\)]*?)(?:(?:=|<=>|r?like|sounds\s+like|regexp)([\s'"\(\)]*?)\2|(?:!=|<=|>=|<>|<|>|\^|is\s+not|not\s+like|not\s+regexp)([\s'"\(\)]*?)(?!\2)([\d\w]+)))`,
			`(?i:([\s'"\(\)]*?)([\d\w]+)([\s'"\(\)]*?)(?:(?:=|<=>|r?like|sounds\s+like|regexp)([\s'"\(\)]*?)\2|(?:!=|<=|>=|<>|<|>|\^|is\s+not|not\s+like|not\s+regexp)([\s'"\(\)]*?)(?!\2)([\d\w]+)))`,
		},
		{`a*+`, `a*`},
		{`a\*+`, `a\*+`},
		{`\*+`, `\*+`},
		{`\\*+`, `\\*`},
		{`\\\*+`, `\\\*+`},
		{`\\\\*+`, `\\\\*`},
		{`\\\\\*+`, `\\\\\*+`},
		{`xa*+a*+x`, `xa*a*x`},
		{`xa\*+a*+x`, `xa\*+a*x`},
		{`xa\*+a\*+x`, `xa\*+a\*+x`},
		{`a?+`, `a?`},
		{`a\?+`, `a\?+`},
		{`\?+`, `\?+`},
		{`\\?+`, `\\?`},
		{`\\\?+`, `\\\?+`},
		{`\\\\?+`, `\\\\?`},
		{`\\\\\?+`, `\\\\\?+`},
		{`xa?+a?+x`, `xa?a?x`},
		{`xa\?+a?+x`, `xa\?+a?x`},
		{`xa\?+a\?+x`, `xa\?+a\?+x`},
		{`a{2,5}+`, `a{2,5}`},
		{`a\{2,5}+`, `a\{2,5}+`},
		{`\{2,5}+`, `\{2,5}+`},
		{`\\{2,5}+`, `\\{2,5}`},
		{`\\\{2,5}+`, `\\\{2,5}+`},
		{`\\\\{2,5}+`, `\\\\{2,5}`},
		{`\\\\\{2,5}+`, `\\\\\{2,5}+`},
		{`xa{2,5}+a{2,5}+x`, `xa{2,5}a{2,5}x`},
		{`xa\{2,5}+a{2,5}+x`, `xa\{2,5}+a{2,5}x`},
		{`xa\{2,5}+a\{2,5}+x`, `xa\{2,5}+a\{2,5}+x`},
		{`a{2,}+`, `a{2,}`},
		{`a\{2,}+`, `a\{2,}+`},
		{`\{2,}+`, `\{2,}+`},
		{`\\{2,}+`, `\\{2,}`},
		{`\\\{2,}+`, `\\\{2,}+`},
		{`\\\\{2,}+`, `\\\\{2,}`},
		{`\\\\\{2,}+`, `\\\\\{2,}+`},
		{`a{2}+`, `a{2}`},
		{`a\{2}+`, `a\{2}+`},
		{`\{2}+`, `\{2}+`},
		{`\\{2}+`, `\\{2}`},
		{`\\\{2}+`, `\\\{2}+`},
		{`\\\\{2}+`, `\\\\{2}`},
		{`\\\\\{2}+`, `\\\\\{2}+`},
	}

	// Act and assert
	var b strings.Builder
	for i, test := range tests {
		r := removePcrePossessiveQuantifier(test.input)

		if r != test.expected {
			fmt.Fprintf(&b, "Unexpected result %d. Expected: %s. Actual: %s.\n", i, test.expected, r)
		}
	}

	if b.Len() > 0 {
		t.Fatalf("%s", b.String())
	}
}
